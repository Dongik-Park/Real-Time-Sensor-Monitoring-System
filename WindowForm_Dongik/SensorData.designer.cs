#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowForm_Dongik
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class SensorDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSensorData(SensorData instance);
    partial void UpdateSensorData(SensorData instance);
    partial void DeleteSensorData(SensorData instance);
    partial void InsertBaseSensorConfig(BaseSensorConfig instance);
    partial void UpdateBaseSensorConfig(BaseSensorConfig instance);
    partial void DeleteBaseSensorConfig(BaseSensorConfig instance);
    #endregion
		
		public SensorDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SensorDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SensorDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SensorDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SensorData> SensorDatas
		{
			get
			{
				return this.GetTable<SensorData>();
			}
		}
		
		public System.Data.Linq.Table<BaseSensorConfig> BaseSensorConfigs
		{
			get
			{
				return this.GetTable<BaseSensorConfig>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class SensorData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private ulong _Id;
		
		private System.DateTime _Time;
		
		private double _Data;
		
		private int _SensorConfigId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(ulong value);
    partial void OnIdChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnDataChanging(double value);
    partial void OnDataChanged();
    partial void OnSensorConfigIdChanging(int value);
    partial void OnSensorConfigIdChanged();
    #endregion
		
		public SensorData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true)]
		public ulong Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="Float")]
		public double Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorConfigId")]
		public int SensorConfigId
		{
			get
			{
				return this._SensorConfigId;
			}
			set
			{
				if ((this._SensorConfigId != value))
				{
					this.OnSensorConfigIdChanging(value);
					this.SendPropertyChanging();
					this._SensorConfigId = value;
					this.SendPropertyChanged("SensorConfigId");
					this.OnSensorConfigIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="0", Type=typeof(BaseSensorConfig), IsDefault=true)]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="1", Type=typeof(TempertaureSensorConfig))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="4", Type=typeof(ModbusSensorConfig))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="2", Type=typeof(CpuSensorConfig))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="3", Type=typeof(MemorySensorConfig))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="5", Type=typeof(OmapSensorConfig))]
	public partial class BaseSensorConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private global::WindowForm_Dongik.SensorType _SensorType;
		
		private System.DateTime _MadeTime;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSensorTypeChanging(global::WindowForm_Dongik.SensorType value);
    partial void OnSensorTypeChanged();
    partial void OnMadeTimeChanging(System.DateTime value);
    partial void OnMadeTimeChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public BaseSensorConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorType", DbType="tinyint default 0", CanBeNull=false, IsDiscriminator=true)]
		public global::WindowForm_Dongik.SensorType SensorType
		{
			get
			{
				return this._SensorType;
			}
			set
			{
				if ((this._SensorType != value))
				{
					this.OnSensorTypeChanging(value);
					this.SendPropertyChanging();
					this._SensorType = value;
					this.SendPropertyChanged("SensorType");
					this.OnSensorTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MadeTime")]
		public System.DateTime MadeTime
		{
			get
			{
				return this._MadeTime;
			}
			set
			{
				if ((this._MadeTime != value))
				{
					this.OnMadeTimeChanging(value);
					this.SendPropertyChanging();
					this._MadeTime = value;
					this.SendPropertyChanged("MadeTime");
					this.OnMadeTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class TempertaureSensorConfig : BaseSensorConfig
	{
		
		private CoreNumber _Core1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCoreIndexChanging(CoreNumber value);
    partial void OnCoreIndexChanged();
    #endregion
		
		public TempertaureSensorConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Core1", DbType="tinyint default 0", CanBeNull=false)]
		public CoreNumber CoreIndex
		{
			get
			{
				return this._Core1;
			}
			set
			{
				if ((this._Core1 != value))
				{
					this.OnCoreIndexChanging(value);
					this.SendPropertyChanging();
					this._Core1 = value;
					this.SendPropertyChanged("CoreIndex");
					this.OnCoreIndexChanged();
				}
			}
		}
	}
	
	public partial class ModbusSensorConfig : BaseSensorConfig
	{
		
		private string _Ip;
		
		private int _Port;
		
		private ushort _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIpChanging(string value);
    partial void OnIpChanged();
    partial void OnPortChanging(int value);
    partial void OnPortChanged();
    partial void OnAddressChanging(ushort value);
    partial void OnAddressChanged();
    #endregion
		
		public ModbusSensorConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="NVARCHAR(4000) default \'127.0.0.1\'", CanBeNull=false)]
		public string Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this.OnIpChanging(value);
					this.SendPropertyChanging();
					this._Ip = value;
					this.SendPropertyChanged("Ip");
					this.OnIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Port", DbType="int default 0")]
		public int Port
		{
			get
			{
				return this._Port;
			}
			set
			{
				if ((this._Port != value))
				{
					this.OnPortChanging(value);
					this.SendPropertyChanging();
					this._Port = value;
					this.SendPropertyChanged("Port");
					this.OnPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="smallint default 0")]
		public ushort Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
	}
	
	public partial class CpuSensorConfig : BaseSensorConfig
	{
		
		private ProcessType _Process;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProcessTypeChanging(ProcessType value);
    partial void OnProcessTypeChanged();
    #endregion
		
		public CpuSensorConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Process", Storage="_Process", DbType="tinyint default 0", CanBeNull=false)]
		public ProcessType ProcessType
		{
			get
			{
				return this._Process;
			}
			set
			{
				if ((this._Process != value))
				{
					this.OnProcessTypeChanging(value);
					this.SendPropertyChanging();
					this._Process = value;
					this.SendPropertyChanged("ProcessType");
					this.OnProcessTypeChanged();
				}
			}
		}
	}
	
	public partial class MemorySensorConfig : BaseSensorConfig
	{
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    #endregion
		
		public MemorySensorConfig()
		{
			OnCreated();
		}
	}
	
	public partial class OmapSensorConfig : BaseSensorConfig
	{
		
		private OmapType _OmapType;
		
		private string _Ip;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOmapTypeChanging(OmapType value);
    partial void OnOmapTypeChanged();
    partial void OnIpChanging(string value);
    partial void OnIpChanged();
    #endregion
		
		public OmapSensorConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OmapType", DbType="tinyint default 0", CanBeNull=false)]
		public OmapType OmapType
		{
			get
			{
				return this._OmapType;
			}
			set
			{
				if ((this._OmapType != value))
				{
					this.OnOmapTypeChanging(value);
					this.SendPropertyChanging();
					this._OmapType = value;
					this.SendPropertyChanged("OmapType");
					this.OnOmapTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="OmapIp", Storage="_Ip", DbType="NVARCHAR(4000) default \'127.0.0.1\'", CanBeNull=false)]
		public string Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this.OnIpChanging(value);
					this.SendPropertyChanging();
					this._Ip = value;
					this.SendPropertyChanged("Ip");
					this.OnIpChanged();
				}
			}
		}
	}
}
#pragma warning restore 1591
